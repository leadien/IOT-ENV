<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\EXFlash\RunInFlash.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\EXFlash\RunInFlash.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 894]: Last Updated: Thu May 11 15:52:43 2017
<BR><P>
<H3>Maximum Stack Usage =        648 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
WERS485RecevieTask &rArr; WERSPCDataProcess &rArr; WERSAPCmd &rArr; WERSGetDeviceAddress &rArr; SMPL_Ioctl &rArr; nwk_rawReceive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[6b]">OS_CPU_SR_Save</a>
 <LI><a href="#[6e]">OS_CPU_SR_Restore</a>
 <LI><a href="#[d6]">OSStartHighRdy</a>
 <LI><a href="#[e7]">OSCtxSw</a>
 <LI><a href="#[c8]">OSIntCtxSw</a>
 <LI><a href="#[8]">OSPendSV</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[100]">broadcast_nwk_search_server</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f3]">SMPL_Ioctl</a><BR>
 <LI><a href="#[ff]">broadcast_nwk_reset</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f3]">SMPL_Ioctl</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[58]">AppTaskStart</a> from main.o(i.AppTaskStart) referenced from main.o(i.main)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from bsp.o(i.EXTI0_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from stm32f10x_it.o(i.EXTI1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">MRFI_GpioIsr</a> from mrfi.o(i.MRFI_GpioIsr) referenced from bsp.o(i.BSP_InitForCC1100)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4a]">OSIntExit</a> from os_core.o(i.OSIntExit) referenced from os_cpu_a.o(.text)
 <LI><a href="#[8]">OSPendSV</a> from os_cpu_a.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">OSTaskSwHook</a> from os_cpu_c.o(i.OSTaskSwHook) referenced from os_cpu_a.o(.text)
 <LI><a href="#[4c]">OSTmr_Task</a> from os_tmr.o(i.OSTmr_Task) referenced from os_tmr.o(i.OSTmr_InitTask)
 <LI><a href="#[4d]">OS_TaskIdle</a> from os_core.o(i.OS_TaskIdle) referenced from os_core.o(i.OS_InitTaskIdle)
 <LI><a href="#[4e]">OS_TaskStat</a> from os_core.o(i.OS_TaskStat) referenced from os_core.o(i.OS_InitTaskStat)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f10x_it.o(i.SVC_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f10x_it.o(i.SysTick_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">SystemInit_ExtMemCtl</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from dtimer.o(i.TIM3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from bsp.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[51]">WERS485RecevieTask</a> from wers.o(i.WERS485RecevieTask) referenced from wers.o(i.WERSExTask)
 <LI><a href="#[55]">WERSExTask</a> from wers.o(i.WERSExTask) referenced from wers.o(i.WERS_init)
 <LI><a href="#[50]">WERSRFBridgeTask</a> from wers.o(i.WERSRFBridgeTask) referenced from wers.o(i.WERSExTask)
 <LI><a href="#[4f]">WERSRFReceiverTask</a> from wers.o(i.WERSRFReceiverTask) referenced from wers.o(i.WERSExTask)
 <LI><a href="#[54]">WERSTimerISR</a> from wers.o(i.WERSTimerISR) referenced from wers.o(i.WERSExTask)
 <LI><a href="#[60]">WERS_RTS_CTS_Notify</a> from wers.o(i.WERS_RTS_CTS_Notify) referenced from wers.o(.constdata)
 <LI><a href="#[5f]">WERS_processReSendRequest</a> from wers.o(i.WERS_processReSendRequest) referenced from wers.o(.constdata)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[57]">fputc</a> from uart.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[46]">main</a> from main.o(i.main) referenced from entry8.o(.ARM.Collect$$$$00000009)
 <LI><a href="#[5d]">nwk_processFreq</a> from nwk_freq.o(i.nwk_processFreq) referenced from nwk_frame.o(.constdata)
 <LI><a href="#[5b]">nwk_processJoin</a> from nwk_join.o(i.nwk_processJoin) referenced from nwk_frame.o(.constdata)
 <LI><a href="#[5a]">nwk_processLink</a> from nwk_link.o(i.nwk_processLink) referenced from nwk_frame.o(.constdata)
 <LI><a href="#[5e]">nwk_processMgmt</a> from nwk_mgmt.o(i.nwk_processMgmt) referenced from nwk_frame.o(.constdata)
 <LI><a href="#[59]">nwk_processPing</a> from nwk_ping.o(i.nwk_processPing) referenced from nwk_frame.o(.constdata)
 <LI><a href="#[5c]">nwk_processSecurity</a> from nwk_security.o(i.nwk_processSecurity) referenced from nwk_frame.o(.constdata)
 <LI><a href="#[53]">sCB</a> from wers.o(i.sCB) referenced from wers.o(i.WERSExTask)
 <LI><a href="#[52]">sReset</a> from wers.o(i.sReset) referenced from wers.o(i.WERSExTask)
 <LI><a href="#[56]">watchDogTask</a> from rf_wd.o(i.watchDogTask) referenced from rf_wd.o(i.WatchDogInit)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[17b]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[61]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[69]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[17c]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[17d]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8.o(.ARM.Collect$$$$00000009))

<P><STRONG><a name="[12a]"></a>SystemReset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSAPCmd
</UL>

<P><STRONG><a name="[47]"></a>SystemInit_ExtMemCtl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>OS_CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegMrfiIsr
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetReceive
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Sleep
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRegAccess
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiBurstFifoAccess
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SyncPinRxIsr
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsec
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QfindOldest
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QadjustOrder
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getLocalLinkID
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_mem_malloc
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_mem_free
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERS_Transmit
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSRFReceiverTask
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSExTask
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchTransactionGUID
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendTransactionToQue
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddNewTransactionToQue
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sReset
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSExWorking
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackOffTimeOutEx
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackOffTimeOut
</UL>

<P><STRONG><a name="[6e]"></a>OS_CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegMrfiIsr
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetReceive
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Sleep
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRegAccess
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiBurstFifoAccess
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SyncPinRxIsr
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsec
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QfindOldest
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QadjustOrder
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getLocalLinkID
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_mem_malloc
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_mem_free
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERS_Transmit
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSRFReceiverTask
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSExTask
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchTransactionGUID
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendTransactionToQue
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddNewTransactionToQue
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sReset
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSExWorking
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackOffTimeOutEx
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackOffTimeOut
</UL>

<P><STRONG><a name="[d6]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[e7]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[c8]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[8]"></a>OSPendSV</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17e]"></a>___aeabi_memcpy8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>__aeabi_memcpy</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Receive
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_retrieveFrame
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildFrame
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERS485Send
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processMessage
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERS_processReSendRequest
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERS_RTS_CTS_Notify
</UL>

<P><STRONG><a name="[17f]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[180]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SyncPinRxIsr
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_linkInit
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QInit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_mem_init
</UL>

<P><STRONG><a name="[12b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_allocateLocalRxPort
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSExTask
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSAPCmd
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sReset
</UL>

<P><STRONG><a name="[182]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>_memset$wrapper</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[147]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_RTS_process
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_Data_Ack_process
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_CTS_process
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_join_reply
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processMgmt
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QfindOldest
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getSandFFrame
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isDupSandFFrame
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatchFrame
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isSandFClient
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_saveJoinedDevice
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isValidReply
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isLinked
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isLinkDuplicate
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isConnectionValid
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_findAlreadyJoined
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_allocateLocalRxPort
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[62]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[183]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[184]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[185]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>__decompress1</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>AddNewTransactionToQue</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, wers.o(i.AddNewTransactionToQue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = AddNewTransactionToQue &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmrMsTimeGet
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processMessage
</UL>

<P><STRONG><a name="[7a]"></a>BSP_InitForCC1100</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, bsp.o(i.BSP_InitForCC1100))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_InitForCC1100 &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegMrfiIsr
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Init
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>ButtonInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(i.ButtonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ButtonInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[132]"></a>CreateTimerEx</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, dtimer.o(i.CreateTimerEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CreateTimerEx
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDogInit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSExTask
</UL>

<P><STRONG><a name="[71]"></a>DTimerInit</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, dtimer.o(i.DTimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DTimerInit &rArr; TIM_OC1Init
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[131]"></a>DeleteTimer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dtimer.o(i.DeleteTimer))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSExTask
</UL>

<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, bsp.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = EXTI0_IRQHandler &rArr; OSIntExit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32f10x_it.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = EXTI1_IRQHandler &rArr; OSIntExit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[8a]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[7f]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitForCC1100
</UL>

<P><STRONG><a name="[8d]"></a>FLASH_GetStatus</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[8c]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32f10x_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WritePage
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ErasePage
</UL>

<P><STRONG><a name="[90]"></a>Flash_Read</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, flash.o(i.Flash_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Flash_Read &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSReadDevice
</UL>

<P><STRONG><a name="[92]"></a>Flash_Write</STRONG> (Thumb, 720 bytes, Stack size 56 bytes, flash.o(i.Flash_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Flash_Write &rArr; Flash_WritePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmemcmp
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WritePage
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ErasePage
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSWriteDevice
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSReadDevice
</UL>

<P><STRONG><a name="[7e]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitForCC1100
</UL>

<P><STRONG><a name="[7c]"></a>GPIO_Init</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_COMInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_LEDInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonInit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitForCC1100
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CC1100_Init
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[142]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDogInit
</UL>

<P><STRONG><a name="[141]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_ReloadCounter))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchDogTask
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDogInit
</UL>

<P><STRONG><a name="[13f]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_SetPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDogInit
</UL>

<P><STRONG><a name="[140]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_SetReload))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDogInit
</UL>

<P><STRONG><a name="[13e]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_WriteAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDogInit
</UL>

<P><STRONG><a name="[13c]"></a>MILD_max</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wers.o(i.MILD_max))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERS_Transmit
</UL>

<P><STRONG><a name="[13b]"></a>MILD_min</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, wers.o(i.MILD_min))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERS_Transmit
</UL>

<P><STRONG><a name="[b6]"></a>MRFI_CheckSameSystemID</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mrfi.o(i.MRFI_CheckSameSystemID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MRFI_CheckSameSystemID
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SyncPinRxIsr
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_join_reply
</UL>

<P><STRONG><a name="[96]"></a>MRFI_DelayMs</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mrfi.o(i.MRFI_DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MRFI_DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_ping
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
</UL>

<P><STRONG><a name="[97]"></a>MRFI_EnableRxAddrFilter</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mrfi.o(i.MRFI_EnableRxAddrFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MRFI_EnableRxAddrFilter &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Init
</UL>

<P><STRONG><a name="[f4]"></a>MRFI_GetRadioState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mrfi.o(i.MRFI_GetRadioState))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_ping
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSPCDataProcess
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SendRTS
</UL>

<P><STRONG><a name="[4b]"></a>MRFI_GpioIsr</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mrfi.o(i.MRFI_GpioIsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = MRFI_GpioIsr &rArr; Mrfi_SyncPinRxIsr &rArr; MRFI_RxCompleteISR &rArr; nwk_QfindSlot &rArr; nwk_QadjustOrder
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_LEDSet
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SyncPinRxIsr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(i.BSP_InitForCC1100)
</UL>
<P><STRONG><a name="[9a]"></a>MRFI_Init</STRONG> (Thumb, 518 bytes, Stack size 16 bytes, mrfi.o(i.MRFI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = MRFI_Init &rArr; mrfiSpiInit &rArr; SPI_CC1100_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiWriteReg
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiReadReg
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetLogicalChannel
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RxModeOff
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsec
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxTxByte
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Init
</UL>

<P><STRONG><a name="[b3]"></a>MRFI_RandomByte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mrfi.o(i.MRFI_RandomByte))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RandomBackoffDelay
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_pingInit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgmtInit
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_linkInit
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERS_RandomDelay
</UL>

<P><STRONG><a name="[a3]"></a>MRFI_Receive</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mrfi.o(i.MRFI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MRFI_Receive &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxCompleteISR
</UL>

<P><STRONG><a name="[a4]"></a>MRFI_Rssi</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, mrfi.o(i.MRFI_Rssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = MRFI_Rssi &rArr; mrfiSpiReadReg &rArr; spiRegAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiReadReg
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsec
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_CalculateRssi
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_radioControl
</UL>

<P><STRONG><a name="[b5]"></a>MRFI_RxAddrIsFiltered</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, mrfi.o(i.MRFI_RxAddrIsFiltered))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MRFI_RxAddrIsFiltered
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SyncPinRxIsr
</UL>

<P><STRONG><a name="[a6]"></a>MRFI_RxCompleteISR</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nwk_frame.o(i.MRFI_RxCompleteISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = MRFI_RxCompleteISR &rArr; nwk_QfindSlot &rArr; nwk_QadjustOrder
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Receive
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QfindSlot
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatchFrame
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SyncPinRxIsr
</UL>

<P><STRONG><a name="[a9]"></a>MRFI_RxIdle</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mrfi.o(i.MRFI_RxIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = MRFI_RxIdle &rArr; Mrfi_RxModeOff &rArr; mrfiSpiCmdStrobe
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RxModeOff
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Sleep
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_radioControl
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_ping
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSPCDataProcess
</UL>

<P><STRONG><a name="[aa]"></a>MRFI_RxOn</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mrfi.o(i.MRFI_RxOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = MRFI_RxOn &rArr; Mrfi_RxModeOn &rArr; mrfiSpiCmdStrobe
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RxModeOn
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_radioControl
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_ping
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SendRTS
</UL>

<P><STRONG><a name="[a0]"></a>MRFI_SetLogicalChannel</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, mrfi.o(i.MRFI_SetLogicalChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = MRFI_SetLogicalChannel &rArr; mrfiSpiWriteReg &rArr; spiRegAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiWriteReg
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RxModeOn
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RxModeOff
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
</UL>

<P><STRONG><a name="[ac]"></a>MRFI_SetRxAddrFilter</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mrfi.o(i.MRFI_SetRxAddrFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MRFI_SetRxAddrFilter &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Init
</UL>

<P><STRONG><a name="[ad]"></a>MRFI_Sleep</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mrfi.o(i.MRFI_Sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = MRFI_Sleep &rArr; MRFI_RxIdle &rArr; Mrfi_RxModeOff &rArr; mrfiSpiCmdStrobe
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_radioControl
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_ping
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSPCDataProcess
</UL>

<P><STRONG><a name="[ae]"></a>MRFI_Transmit</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, mrfi.o(i.MRFI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = MRFI_Transmit &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiWriteTxFifo
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiWriteReg
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiReadReg
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RxModeOn
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RxModeOff
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RandomBackoffDelay
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsec
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_SendEmptyPollRspFrame
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendFrame
</UL>

<P><STRONG><a name="[b1]"></a>MRFI_WakeUp</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, mrfi.o(i.MRFI_WakeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = MRFI_WakeUp &rArr; mrfiSpiWriteReg &rArr; spiRegAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiWriteReg
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_radioControl
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_ping
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SendRTS
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>NVIC_Init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_485_uart
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTimerInit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitForCC1100
</UL>

<P><STRONG><a name="[b7]"></a>OSEventNameSet</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, os_core.o(i.OSEventNameSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSEventNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[ba]"></a>OSInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, os_core.o(i.OSInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitRdyList
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitMisc
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb]"></a>OSInitHookBegin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookBegin))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c6]"></a>OSInitHookEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookEnd))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[4a]"></a>OSIntExit</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, os_core.o(i.OSIntExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSIntExit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(.text)
</UL>
<P><STRONG><a name="[c9]"></a>OSQAccept</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, os_q.o(i.OSQAccept))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSQAccept
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSExTask
</UL>

<P><STRONG><a name="[ca]"></a>OSQCreate</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, os_q.o(i.OSQCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSQCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSExTask
</UL>

<P><STRONG><a name="[cc]"></a>OSQPend</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, os_q.o(i.OSQPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = OSQPend &rArr; OS_Sched &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTOAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSRFReceiverTask
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERS485RecevieTask
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSRFBridgeTask
</UL>

<P><STRONG><a name="[d0]"></a>OSQPost</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, os_q.o(i.OSQPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OSQPost &rArr; OS_Sched &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSTimerISR
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSExTask
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processMessage
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERS_processReSendRequest
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERS_RTS_CTS_Notify
</UL>

<P><STRONG><a name="[d2]"></a>OSSemCreate</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, os_sem.o(i.OSSemCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[d3]"></a>OSSemPend</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, os_sem.o(i.OSSemPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OSSemPend &rArr; OS_Sched &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTOAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Lock
</UL>

<P><STRONG><a name="[d4]"></a>OSSemPost</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, os_sem.o(i.OSSemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSSemPost &rArr; OS_Sched &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlock
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSignal
</UL>

<P><STRONG><a name="[d5]"></a>OSStart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_core.o(i.OSStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSStart
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>OSStatInit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, os_core.o(i.OSStatInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OSStatInit &rArr; OSTimeDly &rArr; OS_Sched &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[e8]"></a>OSTCBInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTCBInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[d7]"></a>OSTaskCreate</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, os_task.o(i.OSTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERS_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSExTask
</UL>

<P><STRONG><a name="[da]"></a>OSTaskCreateExt</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, os_task.o(i.OSTaskCreateExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStkClr
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
</UL>

<P><STRONG><a name="[e9]"></a>OSTaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskCreateHook))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[ea]"></a>OSTaskIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[dc]"></a>OSTaskNameSet</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, os_task.o(i.OSTaskNameSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
</UL>

<P><STRONG><a name="[eb]"></a>OSTaskStatHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskStatHook))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[dd]"></a>OSTaskStkChk</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, os_task.o(i.OSTaskStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>

<P><STRONG><a name="[d8]"></a>OSTaskStkInit</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, os_cpu_c.o(i.OSTaskStkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[49]"></a>OSTaskSwHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskSwHook))
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(.text)
</UL>
<P><STRONG><a name="[75]"></a>OSTimeDly</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, os_time.o(i.OSTimeDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_Sched &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSExTask
</UL>

<P><STRONG><a name="[de]"></a>OSTimeTick</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, os_core.o(i.OSTimeTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = OSTimeTick &rArr; OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_Sched &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[df]"></a>OSTimeTickHook</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTimeTickHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_Sched &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSignal
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[e0]"></a>OSTmrSignal</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_tmr.o(i.OSTmrSignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OSTmrSignal &rArr; OSSemPost &rArr; OS_Sched &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>

<P><STRONG><a name="[c5]"></a>OSTmr_Init</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, os_tmr.o(i.OSTmr_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[cf]"></a>OS_EventTOAbort</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, os_core.o(i.OS_EventTOAbort))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
</UL>

<P><STRONG><a name="[d1]"></a>OS_EventTaskRdy</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, os_core.o(i.OS_EventTaskRdy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
</UL>

<P><STRONG><a name="[cd]"></a>OS_EventTaskWait</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, os_core.o(i.OS_EventTaskWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskWait
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
</UL>

<P><STRONG><a name="[cb]"></a>OS_EventWaitListInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(i.OS_EventWaitListInit))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
</UL>

<P><STRONG><a name="[c0]"></a>OS_FlagInit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, os_flag.o(i.OS_FlagInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_FlagInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[e1]"></a>OS_MemClr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_core.o(i.OS_MemClr))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
</UL>

<P><STRONG><a name="[c1]"></a>OS_MemInit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, os_mem.o(i.OS_MemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_MemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c2]"></a>OS_QInit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, os_q.o(i.OS_QInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_QInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[ce]"></a>OS_Sched</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, os_core.o(i.OS_Sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OS_Sched &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
</UL>

<P><STRONG><a name="[b9]"></a>OS_StrCopy</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(i.OS_StrCopy))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
</UL>

<P><STRONG><a name="[b8]"></a>OS_StrLen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(i.OS_StrLen))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
</UL>

<P><STRONG><a name="[d9]"></a>OS_TCBInit</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, os_core.o(i.OS_TCBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[4d]"></a>OS_TaskIdle</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_core.o(i.OS_TaskIdle))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OS_InitTaskIdle)
</UL>
<P><STRONG><a name="[4e]"></a>OS_TaskStat</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, os_core.o(i.OS_TaskStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStat &rArr; OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OS_InitTaskStat)
</UL>
<P><STRONG><a name="[ec]"></a>OS_TaskStatStkChk</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, os_core.o(i.OS_TaskStatStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[db]"></a>OS_TaskStkClr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_task.o(i.OS_TaskStkClr))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[ed]"></a>PendTransactionToQue</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, wers.o(i.PendTransactionToQue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = PendTransactionToQue
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmrMsTimeGet
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSRFReceiverTask
</UL>

<P><STRONG><a name="[85]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_COMInit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTimerInit
</UL>

<P><STRONG><a name="[7b]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_COMInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_LEDInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonInit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitForCC1100
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CC1100_Init
</UL>

<P><STRONG><a name="[120]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[ee]"></a>RFMacSemPend</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, wers.o(i.RFMacSemPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RFMacSemPend
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERS_Transmit
</UL>

<P><STRONG><a name="[ef]"></a>RF_SendRTS</STRONG> (Thumb, 142 bytes, Stack size 64 bytes, wers.o(i.RF_SendRTS))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = RF_SendRTS &rArr; SMPL_Ioctl &rArr; nwk_rawReceive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_WakeUp
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_GetRadioState
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getMyAddress
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getBCastAddress
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getConnInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERS_Transmit
</UL>

<P><STRONG><a name="[7d]"></a>RegMrfiIsr</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, bsp.o(i.RegMrfiIsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = RegMrfiIsr
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitForCC1100
</UL>

<P><STRONG><a name="[f5]"></a>ResetReceive</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mrfi.o(i.ResetReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = ResetReceive &rArr; mrfiSpiCmdStrobe
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchDogTask
</UL>

<P><STRONG><a name="[f6]"></a>SMPL_Init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, nwk_api.o(i.SMPL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = SMPL_Init &rArr; MRFI_Init &rArr; mrfiSpiInit &rArr; SPI_CC1100_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitForCC1100
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_WakeUp
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetRxAddrFilter
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_EnableRxAddrFilter
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_join
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getMyAddress
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Reset
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSExTask
</UL>

<P><STRONG><a name="[f3]"></a>SMPL_Ioctl</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, nwk_api.o(i.SMPL_Ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = SMPL_Ioctl &rArr; nwk_rawReceive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_rawSend
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_rawReceive
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_radioControl
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinContext
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_deviceAddress
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_connectionControl
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcast_nwk_search_server
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcast_nwk_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_CTS_process
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_ping
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcast_nwk_search_server
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcast_nwk_reset
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSSetDeviceAddress
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSSendDataAck
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSResponseCTS
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSPCDataProcess
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSGetDeviceAddress
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSExTask
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSAPCmd
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SendRTS
</UL>

<P><STRONG><a name="[101]"></a>SMPL_Link</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nwk_api.o(i.SMPL_Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = SMPL_Link &rArr; nwk_link &rArr; SMPL_Ioctl &rArr; nwk_rawReceive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSExTask
</UL>

<P><STRONG><a name="[103]"></a>SMPL_LinkClose</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nwk_api.o(i.SMPL_LinkClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SMPL_LinkClose &rArr; nwk_linkClose &rArr; nwk_freeConnectionEx &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_linkClose
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSExTask
</UL>

<P><STRONG><a name="[105]"></a>SMPL_LinkListen</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nwk_api.o(i.SMPL_LinkListen))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = SMPL_LinkListen &rArr; nwk_getLocalLinkID
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getLocalLinkID
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSExWorking
</UL>

<P><STRONG><a name="[107]"></a>SMPL_Ping</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nwk_api.o(i.SMPL_Ping))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = SMPL_Ping &rArr; nwk_ping &rArr; SMPL_Ioctl &rArr; nwk_rawReceive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_ping
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSExTask
</UL>

<P><STRONG><a name="[109]"></a>SMPL_Receive</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, nwk_api.o(i.SMPL_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = SMPL_Receive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_retrieveFrame
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getConnInfo
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_checkConnInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSRFReceiverTask
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processMessage
</UL>

<P><STRONG><a name="[10c]"></a>SMPL_Reset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nwk_api.o(i.SMPL_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = SMPL_Reset &rArr; SMPL_Init &rArr; MRFI_Init &rArr; mrfiSpiInit &rArr; SPI_CC1100_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSExTask
</UL>

<P><STRONG><a name="[10d]"></a>SMPL_Send</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, nwk_api.o(i.SMPL_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = SMPL_Send &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendFrame
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isSandFClient
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildFrame
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getConnInfo
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_checkConnInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendEx
</UL>

<P><STRONG><a name="[111]"></a>SMPL_SendEx</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, wers.o(i.SMPL_SendEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = SMPL_SendEx &rArr; SMPL_Send &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Send
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERS_RandomDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERS_Transmit
</UL>

<P><STRONG><a name="[113]"></a>SPI_CC1100_Init</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, spi_cc1100.o(i.SPI_CC1100_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_CC1100_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiInit
</UL>

<P><STRONG><a name="[115]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CC1100_Init
</UL>

<P><STRONG><a name="[114]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CC1100_Init
</UL>

<P><STRONG><a name="[9d]"></a>SPI_RxTxByte</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, spi_cc1100.o(i.SPI_RxTxByte))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRegAccess
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiBurstFifoAccess
</UL>

<P><STRONG><a name="[116]"></a>STM_EVAL_COMInit</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, stm32_eval.o(i.STM_EVAL_COMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = STM_EVAL_COMInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_485_uart
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dbguart
</UL>

<P><STRONG><a name="[73]"></a>STM_EVAL_LEDInit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32_eval.o(i.STM_EVAL_LEDInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = STM_EVAL_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_LEDOff
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[76]"></a>STM_EVAL_LEDOff</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32_eval.o(i.STM_EVAL_LEDOff))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_LEDInit
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[74]"></a>STM_EVAL_LEDOn</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32_eval.o(i.STM_EVAL_LEDOn))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[99]"></a>STM_EVAL_LEDSet</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32_eval.o(i.STM_EVAL_LEDSet))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_GpioIsr
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSRFReceiverTask
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSExTask
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSRFBridgeTask
</UL>

<P><STRONG><a name="[79]"></a>STM_EVAL_LEDToggle</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32_eval.o(i.STM_EVAL_LEDToggle))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[119]"></a>SearchTransactionGUID</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, wers.o(i.SearchTransactionGUID))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = SearchTransactionGUID
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processMessage
</UL>

<P><STRONG><a name="[11a]"></a>SendDataToPC</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, wers.o(i.SendDataToPC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SendDataToPC
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSAPCmd
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERS485Send
</UL>

<P><STRONG><a name="[133]"></a>StartTimer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dtimer.o(i.StartTimer))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDogInit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSExTask
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; OSTimeTick &rArr; OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_Sched &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>SystemInit</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, dtimer.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = TIM3_IRQHandler &rArr; OSIntExit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTimerInit
</UL>

<P><STRONG><a name="[89]"></a>TIM_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTimerInit
</UL>

<P><STRONG><a name="[87]"></a>TIM_OC1Init</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTimerInit
</UL>

<P><STRONG><a name="[86]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTimerInit
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bsp.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = USART1_IRQHandler &rArr; WERSPCPridge &rArr; WERSAPCmd &rArr; WERSGetDeviceAddress &rArr; SMPL_Ioctl &rArr; nwk_rawReceive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSPCPridge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[118]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_COMInit
</UL>

<P><STRONG><a name="[11c]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataToPC
</UL>

<P><STRONG><a name="[14a]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_485_uart
</UL>

<P><STRONG><a name="[117]"></a>USART_Init</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_COMInit
</UL>

<P><STRONG><a name="[11b]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataToPC
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>WERS485RecevieTask</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, wers.o(i.WERS485RecevieTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = WERS485RecevieTask &rArr; WERSPCDataProcess &rArr; WERSAPCmd &rArr; WERSGetDeviceAddress &rArr; SMPL_Ioctl &rArr; nwk_rawReceive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSMsTimeGet
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_mem_free
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSPCDataProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wers.o(i.WERSExTask)
</UL>
<P><STRONG><a name="[124]"></a>WERS485Send</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, wers.o(i.WERS485Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = WERS485Send &rArr; rf_mem_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_mem_malloc
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_mem_free
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_crc
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataToPC
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSAPCmd
</UL>

<P><STRONG><a name="[127]"></a>WERSAPCmd</STRONG> (Thumb, 438 bytes, Stack size 392 bytes, wers.o(i.WERSAPCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = WERSAPCmd &rArr; WERSGetDeviceAddress &rArr; SMPL_Ioctl &rArr; nwk_rawReceive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelay
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemReset
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getBCastAddress
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getConnInfo
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSGetDeviceAddress
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERS485Send
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataToPC
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSWriteDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSPCPridge
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSPCDataProcess
</UL>

<P><STRONG><a name="[55]"></a>WERSExTask</STRONG> (Thumb, 902 bytes, Stack size 16 bytes, wers.o(i.WERSExTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = WERSExTask &rArr; SMPL_Link &rArr; nwk_link &rArr; SMPL_Ioctl &rArr; nwk_rawReceive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_LEDSet
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_485_uart
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteTimer
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTimerEx
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Reset
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ping
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_LinkClose
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Link
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_ResetSet
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDogInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERS_RandomDelay
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSSetDeviceAddress
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSReadDevice
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSExWorking
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackOffTimeOut
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wers.o(i.WERS_init)
</UL>
<P><STRONG><a name="[135]"></a>WERSGenerate_RF_GUID</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wers.o(i.WERSGenerate_RF_GUID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WERSGenerate_RF_GUID &rArr; WERSMsTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSMsTimeGet
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSPCDataProcess
</UL>

<P><STRONG><a name="[128]"></a>WERSGetDeviceAddress</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wers.o(i.WERSGetDeviceAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = WERSGetDeviceAddress &rArr; SMPL_Ioctl &rArr; nwk_rawReceive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSAPCmd
</UL>

<P><STRONG><a name="[121]"></a>WERSMsTimeGet</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wers.o(i.WERSMsTimeGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WERSMsTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmrMsTimeGet
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSGenerate_RF_GUID
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERS485RecevieTask
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processMessage
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSRFBridgeTask
</UL>

<P><STRONG><a name="[136]"></a>WERSMsTimeSet</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, wers.o(i.WERSMsTimeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WERSMsTimeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmrMsTimeGet
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
</UL>

<P><STRONG><a name="[122]"></a>WERSPCDataProcess</STRONG> (Thumb, 214 bytes, Stack size 56 bytes, wers.o(i.WERSPCDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = WERSPCDataProcess &rArr; WERSAPCmd &rArr; WERSGetDeviceAddress &rArr; SMPL_Ioctl &rArr; nwk_rawReceive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Sleep
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxIdle
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_GetRadioState
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getConnInfo
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERS_Transmit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERS_RandomDelay
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSGenerate_RF_GUID
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSAPCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERS485RecevieTask
</UL>

<P><STRONG><a name="[11f]"></a>WERSPCPridge</STRONG> (Thumb, 334 bytes, Stack size 16 bytes, wers.o(i.WERSPCPridge))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = WERSPCPridge &rArr; WERSAPCmd &rArr; WERSGetDeviceAddress &rArr; SMPL_Ioctl &rArr; nwk_rawReceive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmrMsTimeGet
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSAPCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[4f]"></a>WERSRFReceiverTask</STRONG> (Thumb, 154 bytes, Stack size 64 bytes, wers.o(i.WERSRFReceiverTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = WERSRFReceiverTask &rArr; WERSSendDataAck &rArr; SMPL_Ioctl &rArr; nwk_rawReceive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_LEDSet
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Receive
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_mem_free
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSSendDataAck
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSResponseCTS
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendTransactionToQue
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processMessage
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackOffTimeOut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wers.o(i.WERSExTask)
</UL>
<P><STRONG><a name="[13a]"></a>WERSResponseCTS</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, wers.o(i.WERSResponseCTS))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = WERSResponseCTS &rArr; SMPL_Ioctl &rArr; nwk_rawReceive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getBCastAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSRFReceiverTask
</UL>

<P><STRONG><a name="[139]"></a>WERSSendDataAck</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, wers.o(i.WERSSendDataAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = WERSSendDataAck &rArr; SMPL_Ioctl &rArr; nwk_rawReceive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelay
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getBCastAddress
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getConnInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSRFReceiverTask
</UL>

<P><STRONG><a name="[12e]"></a>WERSSetDeviceAddress</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wers.o(i.WERSSetDeviceAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = WERSSetDeviceAddress &rArr; SMPL_Ioctl &rArr; nwk_rawReceive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSExTask
</UL>

<P><STRONG><a name="[54]"></a>WERSTimerISR</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wers.o(i.WERSTimerISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = WERSTimerISR &rArr; OSQPost &rArr; OS_Sched &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wers.o(i.WERSExTask)
</UL>
<P><STRONG><a name="[112]"></a>WERS_RandomDelay</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, wers.o(i.WERS_RandomDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WERS_RandomDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDelay
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelay
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RandomByte
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSPCDataProcess
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSExTask
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendEx
</UL>

<P><STRONG><a name="[137]"></a>WERS_Transmit</STRONG> (Thumb, 380 bytes, Stack size 72 bytes, wers.o(i.WERS_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = WERS_Transmit &rArr; RF_SendRTS &rArr; SMPL_Ioctl &rArr; nwk_rawReceive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmrMsTimeGet
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelay
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getConnInfo
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendEx
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SendRTS
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFMacSemPend
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MILD_min
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MILD_max
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackOffTimeOutEx
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSPCDataProcess
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSRFBridgeTask
</UL>

<P><STRONG><a name="[78]"></a>WERS_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wers.o(i.WERS_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = WERS_init &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_mem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[130]"></a>WatchDogInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, rf_wd.o(i.WatchDogInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = WatchDogInit &rArr; CreateTimerEx
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTimerEx
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSExTask
</UL>

<P><STRONG><a name="[143]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[188]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[6d]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxCompleteISR
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetRxAddrFilter
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetLogicalChannel
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxIdle
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Rssi
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_EnableRxAddrFilter
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SyncPinRxIsr
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_mgmt_reply
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_join_reply
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processPing
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processMgmt
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatchFrame
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_join
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_freeConnectionEx
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_plug_holes
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_mem_malloc
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_mem_free
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSExTask
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddNewTransactionToQue
</UL>

<P><STRONG><a name="[189]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[18a]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[18b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[ff]"></a>broadcast_nwk_reset</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, nwk_mgmt.o(i.broadcast_nwk_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = broadcast_nwk_reset &rArr;  SMPL_Ioctl (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getBCastAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[100]"></a>broadcast_nwk_search_server</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, nwk_mgmt.o(i.broadcast_nwk_search_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = broadcast_nwk_search_server &rArr;  SMPL_Ioctl (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getBCastAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[126]"></a>cal_crc</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, wers.o(i.cal_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cal_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERS485Send
</UL>

<P><STRONG><a name="[93]"></a>fmemcmp</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, flash.o(i.fmemcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fmemcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
</UL>

<P><STRONG><a name="[57]"></a>fputc</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, uart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[12c]"></a>init_485_uart</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, uart.o(i.init_485_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = init_485_uart &rArr; STM_EVAL_COMInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_COMInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSExTask
</UL>

<P><STRONG><a name="[72]"></a>init_dbguart</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uart.o(i.init_dbguart))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = init_dbguart &rArr; STM_EVAL_COMInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_COMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[149]"></a>isDupSandFFrame</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, nwk_frame.o(i.isDupSandFFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = isDupSandFFrame &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getQ
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatchFrame
</UL>

<P><STRONG><a name="[82]"></a>mDelay</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, dtimer.o(i.mDelay))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_DelayMs
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERS_Transmit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERS_RandomDelay
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSSendDataAck
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSAPCmd
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFMacSemPend
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeOut
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackOffTimeOutEx
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackOffTimeOut
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = main &rArr; OSInit &rArr; OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry8.o(.ARM.Collect$$$$00000009)
</UL>
<P><STRONG><a name="[a1]"></a>mrfiSpiCmdStrobe</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, mrfi.o(i.mrfiSpiCmdStrobe))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = mrfiSpiCmdStrobe
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfi_delay
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxTxByte
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetReceive
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_WakeUp
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Sleep
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SyncPinRxIsr
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RxModeOn
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RxModeOff
</UL>

<P><STRONG><a name="[9b]"></a>mrfiSpiInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mrfi.o(i.mrfiSpiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mrfiSpiInit &rArr; SPI_CC1100_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CC1100_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
</UL>

<P><STRONG><a name="[9e]"></a>mrfiSpiReadReg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mrfi.o(i.mrfiSpiReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = mrfiSpiReadReg &rArr; spiRegAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRegAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Rssi
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SyncPinRxIsr
</UL>

<P><STRONG><a name="[b4]"></a>mrfiSpiReadRxFifo</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mrfi.o(i.mrfiSpiReadRxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = mrfiSpiReadRxFifo &rArr; spiBurstFifoAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiBurstFifoAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SyncPinRxIsr
</UL>

<P><STRONG><a name="[9f]"></a>mrfiSpiWriteReg</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mrfi.o(i.mrfiSpiWriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = mrfiSpiWriteReg &rArr; spiRegAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRegAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_WakeUp
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetLogicalChannel
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
</UL>

<P><STRONG><a name="[af]"></a>mrfiSpiWriteTxFifo</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mrfi.o(i.mrfiSpiWriteTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiBurstFifoAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
</UL>

<P><STRONG><a name="[14e]"></a>mrfi_delay</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mrfi.o(i.mrfi_delay))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRegAccess
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiBurstFifoAccess
</UL>

<P><STRONG><a name="[151]"></a>nwk_CTS_process</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, nwk_mgmt.o(i.nwk_CTS_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = nwk_CTS_process &rArr; SMPL_Ioctl &rArr; nwk_rawReceive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getMyAddress
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getBCastAddress
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_mgmt_reply
</UL>

<P><STRONG><a name="[17a]"></a>nwk_DS_process</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nwk_mgmt.o(i.nwk_DS_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nwk_DS_process
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_mgmt_reply
</UL>

<P><STRONG><a name="[152]"></a>nwk_Data_Ack_process</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, nwk_mgmt.o(i.nwk_Data_Ack_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nwk_Data_Ack_process &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getMyAddress
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_mgmt_reply
</UL>

<P><STRONG><a name="[153]"></a>nwk_QInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nwk_qmgmt.o(i.nwk_QInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nwk_QInit
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[154]"></a>nwk_QadjustOrder</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nwk_qmgmt.o(i.nwk_QadjustOrder))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = nwk_QadjustOrder
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QfindSlot
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_retrieveFrame
</UL>

<P><STRONG><a name="[155]"></a>nwk_QfindOldest</STRONG> (Thumb, 320 bytes, Stack size 80 bytes, nwk_qmgmt.o(i.nwk_QfindOldest))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getConnInfo
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getSandFFrame
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_retrieveFrame
</UL>

<P><STRONG><a name="[a7]"></a>nwk_QfindSlot</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, nwk_qmgmt.o(i.nwk_QfindSlot))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = nwk_QfindSlot &rArr; nwk_QadjustOrder
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QadjustOrder
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxCompleteISR
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildFrame
</UL>

<P><STRONG><a name="[156]"></a>nwk_RTS_process</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, nwk_mgmt.o(i.nwk_RTS_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = nwk_RTS_process &rArr; nwk_isConnectionValid &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getMyAddress
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isConnectionValid
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_mgmt_reply
</UL>

<P><STRONG><a name="[12f]"></a>nwk_ResetSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nwk.o(i.nwk_ResetSet))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSExTask
</UL>

<P><STRONG><a name="[157]"></a>nwk_SendEmptyPollRspFrame</STRONG> (Thumb, 168 bytes, Stack size 80 bytes, nwk_frame.o(i.nwk_SendEmptyPollRspFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = nwk_SendEmptyPollRspFrame &rArr; MRFI_Transmit &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_poll_reply
</UL>

<P><STRONG><a name="[158]"></a>nwk_allocateLocalRxPort</STRONG> (Thumb, 232 bytes, Stack size 152 bytes, nwk.o(i.nwk_allocateLocalRxPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = nwk_allocateLocalRxPort &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
</UL>

<P><STRONG><a name="[10e]"></a>nwk_buildFrame</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, nwk_frame.o(i.nwk_buildFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = nwk_buildFrame &rArr; nwk_QfindSlot &rArr; nwk_QadjustOrder
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QfindSlot
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_ping_reply
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_search_server_reply
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_join_reply
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_rawSend
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Send
</UL>

<P><STRONG><a name="[10a]"></a>nwk_checkConnInfo</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nwk.o(i.nwk_checkConnInfo))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Send
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Receive
</UL>

<P><STRONG><a name="[f9]"></a>nwk_connectionControl</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, nwk_ioctl.o(i.nwk_connectionControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nwk_connectionControl &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getConnInfo
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_freeConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[fa]"></a>nwk_deviceAddress</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nwk_ioctl.o(i.nwk_deviceAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nwk_deviceAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_setMyAddress
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getMyAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[15b]"></a>nwk_findAlreadyJoined</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nwk.o(i.nwk_findAlreadyJoined))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nwk_findAlreadyJoined &rArr; initializeConnection &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeConnection
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
</UL>

<P><STRONG><a name="[15c]"></a>nwk_frameInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nwk_frame.o(i.nwk_frameInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nwk_frameInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getMyAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[159]"></a>nwk_freeConnection</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nwk.o(i.nwk_freeConnection))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_connectionControl
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_freeConnectionEx
</UL>

<P><STRONG><a name="[15d]"></a>nwk_freeConnectionEx</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, nwk.o(i.nwk_freeConnectionEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nwk_freeConnectionEx &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_freeConnection
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_linkClose
</UL>

<P><STRONG><a name="[16e]"></a>nwk_freqInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nwk_freq.o(i.nwk_freqInit))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[f2]"></a>nwk_getBCastAddress</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nwk_globals.o(i.nwk_getBCastAddress))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_CTS_process
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processMgmt
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcast_nwk_search_server
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcast_nwk_reset
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSSendDataAck
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSResponseCTS
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSAPCmd
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SendRTS
</UL>

<P><STRONG><a name="[f0]"></a>nwk_getConnInfo</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, nwk.o(i.nwk_getConnInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_lid2idx
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QfindOldest
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_retrieveFrame
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_radioControl
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_ping
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_connectionControl
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Send
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Receive
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERS_Transmit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSSendDataAck
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSPCDataProcess
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSAPCmd
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SendRTS
</UL>

<P><STRONG><a name="[106]"></a>nwk_getLocalLinkID</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, nwk_link.o(i.nwk_getLocalLinkID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = nwk_getLocalLinkID
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_LinkListen
</UL>

<P><STRONG><a name="[f1]"></a>nwk_getMyAddress</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nwk_globals.o(i.nwk_getMyAddress))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_RTS_process
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_Data_Ack_process
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_CTS_process
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processMgmt
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatchFrame
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_deviceAddress
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_frameInit
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isValidReply
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SendRTS
</UL>

<P><STRONG><a name="[168]"></a>nwk_getMyRxType</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nwk_frame.o(i.nwk_getMyRxType))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
</UL>

<P><STRONG><a name="[15e]"></a>nwk_getNextConnection</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, nwk.o(i.nwk_getNextConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nwk_getNextConnection &rArr; initializeConnection &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
</UL>

<P><STRONG><a name="[14d]"></a>nwk_getQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nwk_qmgmt.o(i.nwk_getQ))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getSandFFrame
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isDupSandFFrame
</UL>

<P><STRONG><a name="[15f]"></a>nwk_getSandFFrame</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, nwk_frame.o(i.nwk_getSandFFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = nwk_getSandFFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getQ
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QfindOldest
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_poll_reply
</UL>

<P><STRONG><a name="[167]"></a>nwk_getServerAddress</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nwk_globals.o(i.nwk_getServerAddress))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
</UL>

<P><STRONG><a name="[16d]"></a>nwk_globalsInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nwk_globals.o(i.nwk_globalsInit))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[148]"></a>nwk_isConnectionValid</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, nwk.o(i.nwk_isConnectionValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nwk_isConnectionValid &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resend_request_process
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_RTS_process
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatchFrame
</UL>

<P><STRONG><a name="[160]"></a>nwk_isLinkDuplicate</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, nwk.o(i.nwk_isLinkDuplicate))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nwk_isLinkDuplicate &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
</UL>

<P><STRONG><a name="[161]"></a>nwk_isLinked</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, nwk.o(i.nwk_isLinked))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nwk_isLinked &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processPing
</UL>

<P><STRONG><a name="[10f]"></a>nwk_isSandFClient</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nwk_join.o(i.nwk_isSandFClient))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nwk_isSandFClient &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_poll_reply
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatchFrame
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Send
</UL>

<P><STRONG><a name="[162]"></a>nwk_isValidReply</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, nwk.o(i.nwk_isValidReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nwk_isValidReply &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getMyAddress
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processPing
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processMgmt
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processLink
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processJoin
</UL>

<P><STRONG><a name="[f8]"></a>nwk_join</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nwk_join.o(i.nwk_join))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nwk_join &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Init
</UL>

<P><STRONG><a name="[fe]"></a>nwk_joinContext</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nwk_ioctl.o(i.nwk_joinContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nwk_joinContext
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_setJoinContext
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[164]"></a>nwk_joinInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nwk_join.o(i.nwk_joinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nwk_joinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RandomByte
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_setLinkToken
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateLinkToken
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[102]"></a>nwk_link</STRONG> (Thumb, 328 bytes, Stack size 56 bytes, nwk_link.o(i.nwk_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = nwk_link &rArr; SMPL_Ioctl &rArr; nwk_rawReceive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_WakeUp
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Sleep
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxIdle
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_GetRadioState
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_DelayMs
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSMsTimeSet
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_setListenContext
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_setAPAddress
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getServerAddress
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getMyRxType
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getNextConnection
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_freeConnection
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_allocateLocalRxPort
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Link
</UL>

<P><STRONG><a name="[104]"></a>nwk_linkClose</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nwk_link.o(i.nwk_linkClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nwk_linkClose &rArr; nwk_freeConnectionEx &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_freeConnectionEx
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_LinkClose
</UL>

<P><STRONG><a name="[16b]"></a>nwk_linkInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, nwk_link.o(i.nwk_linkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nwk_linkInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RandomByte
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[16c]"></a>nwk_mgmtInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nwk_mgmt.o(i.nwk_mgmtInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nwk_mgmtInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RandomByte
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[f7]"></a>nwk_nwkInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, nwk.o(i.nwk_nwkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nwk_nwkInit &rArr; nwk_pingInit
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_securityInit
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_pingInit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgmtInit
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_linkInit
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinInit
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_globalsInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getBCastAddress
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_freqInit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_frameInit
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QInit
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Init
</UL>

<P><STRONG><a name="[108]"></a>nwk_ping</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, nwk_ping.o(i.nwk_ping))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = nwk_ping &rArr; SMPL_Ioctl &rArr; nwk_rawReceive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_WakeUp
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Sleep
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxIdle
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_GetRadioState
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_DelayMs
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getConnInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ping
</UL>

<P><STRONG><a name="[16f]"></a>nwk_pingInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nwk_ping.o(i.nwk_pingInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nwk_pingInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RandomByte
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[5d]"></a>nwk_processFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nwk_freq.o(i.nwk_processFreq))
<BR>[Address Reference Count : 1]<UL><LI> nwk_frame.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>nwk_processJoin</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, nwk_join.o(i.nwk_processJoin))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = nwk_processJoin &rArr; smpl_send_join_reply &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_join_reply
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isValidReply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nwk_frame.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>nwk_processLink</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nwk_link.o(i.nwk_processLink))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = nwk_processLink &rArr; smpl_send_link_reply &rArr; nwk_allocateLocalRxPort &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isValidReply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nwk_frame.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>nwk_processMgmt</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, nwk_mgmt.o(i.nwk_processMgmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = nwk_processMgmt &rArr; smpl_send_mgmt_reply &rArr; nwk_CTS_process &rArr; SMPL_Ioctl &rArr; nwk_rawReceive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_mgmt_reply
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getMyAddress
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getBCastAddress
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isValidReply
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nwk_frame.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>nwk_processPing</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, nwk_ping.o(i.nwk_processPing))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = nwk_processPing &rArr; smpl_send_ping_reply &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_ping_reply
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isValidReply
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isLinked
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nwk_frame.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>nwk_processSecurity</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nwk_security.o(i.nwk_processSecurity))
<BR>[Address Reference Count : 1]<UL><LI> nwk_frame.o(.constdata)
</UL>
<P><STRONG><a name="[fd]"></a>nwk_radioControl</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, nwk_ioctl.o(i.nwk_radioControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = nwk_radioControl &rArr; MRFI_WakeUp &rArr; mrfiSpiWriteReg &rArr; spiRegAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_WakeUp
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Sleep
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxIdle
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Rssi
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getConnInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[fc]"></a>nwk_rawReceive</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nwk_ioctl.o(i.nwk_rawReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = nwk_rawReceive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_retrieveFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[fb]"></a>nwk_rawSend</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, nwk_ioctl.o(i.nwk_rawSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = nwk_rawSend &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendFrame
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[10b]"></a>nwk_retrieveFrame</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, nwk_frame.o(i.nwk_retrieveFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QfindOldest
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QadjustOrder
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getConnInfo
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_rawReceive
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Receive
</UL>

<P><STRONG><a name="[175]"></a>nwk_saveJoinedDevice</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, nwk.o(i.nwk_saveJoinedDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nwk_saveJoinedDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_join_reply
</UL>

<P><STRONG><a name="[170]"></a>nwk_securityInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nwk_security.o(i.nwk_securityInit))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[110]"></a>nwk_sendFrame</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nwk_frame.o(i.nwk_sendFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = nwk_sendFrame &rArr; MRFI_Transmit &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_ping_reply
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_search_server_reply
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_poll_reply
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_join_reply
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_rawSend
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Send
</UL>

<P><STRONG><a name="[169]"></a>nwk_setAPAddress</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nwk_globals.o(i.nwk_setAPAddress))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
</UL>

<P><STRONG><a name="[163]"></a>nwk_setJoinContext</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nwk_join.o(i.nwk_setJoinContext))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinContext
</UL>

<P><STRONG><a name="[166]"></a>nwk_setLinkToken</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nwk_link.o(i.nwk_setLinkToken))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinInit
</UL>

<P><STRONG><a name="[16a]"></a>nwk_setListenContext</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nwk_link.o(i.nwk_setListenContext))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
</UL>

<P><STRONG><a name="[15a]"></a>nwk_setMyAddress</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nwk_globals.o(i.nwk_setMyAddress))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_deviceAddress
</UL>

<P><STRONG><a name="[176]"></a>resend_request_process</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, nwk_mgmt.o(i.resend_request_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = resend_request_process &rArr; nwk_isConnectionValid &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isConnectionValid
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_mgmt_reply
</UL>

<P><STRONG><a name="[123]"></a>rf_mem_free</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, rf_mem.o(i.rf_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = rf_mem_free &rArr; rf_plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_plug_holes
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSRFReceiverTask
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERS485Send
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERS485RecevieTask
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processMessage
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERS_processReSendRequest
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERS_RTS_CTS_Notify
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSRFBridgeTask
</UL>

<P><STRONG><a name="[13d]"></a>rf_mem_init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, rf_mem.o(i.rf_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rf_mem_init
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERS_init
</UL>

<P><STRONG><a name="[125]"></a>rf_mem_malloc</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, rf_mem.o(i.rf_mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = rf_mem_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERS485Send
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processMessage
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERS_processReSendRequest
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERS_RTS_CTS_Notify
</UL>

<P><STRONG><a name="[6c]"></a>tmrMsTimeGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dtimer.o(i.tmrMsTimeGet))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSPCPridge
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSMsTimeSet
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSMsTimeGet
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERS_Transmit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendTransactionToQue
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddNewTransactionToQue
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERS_RTS_CTS_Notify
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeOut
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackOffTimeOutEx
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackOffTimeOut
</UL>

<P><STRONG><a name="[b2]"></a>uDelay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dtimer.o(i.uDelay))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsec
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERS_RandomDelay
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[58]"></a>AppTaskStart</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, main.o(i.AppTaskStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = AppTaskStart &rArr; WERS_init &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dbguart
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERS_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_LEDToggle
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_LEDOn
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_LEDOff
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_LEDInit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTimerInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonInit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[8f]"></a>Flash_ErasePage</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, flash.o(i.Flash_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Flash_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
</UL>

<P><STRONG><a name="[95]"></a>Flash_WritePage</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, flash.o(i.Flash_WritePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Flash_WritePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
</UL>

<P><STRONG><a name="[11d]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[11e]"></a>SetSysClockTo72</STRONG> (Thumb, 198 bytes, Stack size 0 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[8e]"></a>delay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.delay))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[a5]"></a>Mrfi_CalculateRssi</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, mrfi.o(i.Mrfi_CalculateRssi))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Rssi
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SyncPinRxIsr
</UL>

<P><STRONG><a name="[9c]"></a>Mrfi_DelayUsec</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, mrfi.o(i.Mrfi_DelayUsec))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Mrfi_DelayUsec
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDelay
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Rssi
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RandomBackoffDelay
</UL>

<P><STRONG><a name="[b0]"></a>Mrfi_RandomBackoffDelay</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mrfi.o(i.Mrfi_RandomBackoffDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = Mrfi_RandomBackoffDelay &rArr; Mrfi_DelayUsec
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RandomByte
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsec
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
</UL>

<P><STRONG><a name="[a2]"></a>Mrfi_RxModeOff</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mrfi.o(i.Mrfi_RxModeOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Mrfi_RxModeOff &rArr; mrfiSpiCmdStrobe
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetLogicalChannel
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxIdle
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
</UL>

<P><STRONG><a name="[ab]"></a>Mrfi_RxModeOn</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mrfi.o(i.Mrfi_RxModeOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Mrfi_RxModeOn &rArr; mrfiSpiCmdStrobe
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetLogicalChannel
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
</UL>

<P><STRONG><a name="[98]"></a>Mrfi_SyncPinRxIsr</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, mrfi.o(i.Mrfi_SyncPinRxIsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = Mrfi_SyncPinRxIsr &rArr; MRFI_RxCompleteISR &rArr; nwk_QfindSlot &rArr; nwk_QadjustOrder
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxCompleteISR
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiReadRxFifo
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiReadReg
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxAddrIsFiltered
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_CheckSameSystemID
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_CalculateRssi
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_GpioIsr
</UL>

<P><STRONG><a name="[150]"></a>spiBurstFifoAccess</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, mrfi.o(i.spiBurstFifoAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = spiBurstFifoAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfi_delay
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxTxByte
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiWriteTxFifo
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiReadRxFifo
</UL>

<P><STRONG><a name="[14f]"></a>spiRegAccess</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, mrfi.o(i.spiRegAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = spiRegAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfi_delay
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxTxByte
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiWriteReg
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiReadReg
</UL>

<P><STRONG><a name="[14b]"></a>initializeConnection</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, nwk.o(i.initializeConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = initializeConnection &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_lid2idx
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getNextConnection
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_findAlreadyJoined
</UL>

<P><STRONG><a name="[14c]"></a>map_lid2idx</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, nwk.o(i.map_lid2idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = map_lid2idx
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeConnection
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getConnInfo
</UL>

<P><STRONG><a name="[a8]"></a>dispatchFrame</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, nwk_frame.o(i.dispatchFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = dispatchFrame &rArr; isDupSandFFrame &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isDupSandFFrame
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isSandFClient
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getMyAddress
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isConnectionValid
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxCompleteISR
</UL>

<P><STRONG><a name="[165]"></a>generateLinkToken</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nwk_join.o(i.generateLinkToken))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinInit
</UL>

<P><STRONG><a name="[171]"></a>smpl_send_join_reply</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, nwk_join.o(i.smpl_send_join_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = smpl_send_join_reply &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_CheckSameSystemID
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendFrame
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildFrame
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_saveJoinedDevice
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processJoin
</UL>

<P><STRONG><a name="[172]"></a>smpl_send_link_reply</STRONG> (Thumb, 480 bytes, Stack size 48 bytes, nwk_link.o(i.smpl_send_link_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = smpl_send_link_reply &rArr; nwk_allocateLocalRxPort &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_CheckSameSystemID
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSMsTimeGet
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getMyRxType
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendFrame
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildFrame
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isLinkDuplicate
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getNextConnection
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_freeConnection
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_findAlreadyJoined
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_allocateLocalRxPort
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processLink
</UL>

<P><STRONG><a name="[178]"></a>send_poll_reply</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, nwk_mgmt.o(i.send_poll_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = send_poll_reply &rArr; nwk_SendEmptyPollRspFrame &rArr; MRFI_Transmit &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getSandFFrame
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_SendEmptyPollRspFrame
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendFrame
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isSandFClient
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_mgmt_reply
</UL>

<P><STRONG><a name="[179]"></a>send_search_server_reply</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, nwk_mgmt.o(i.send_search_server_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = send_search_server_reply &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendFrame
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_mgmt_reply
</UL>

<P><STRONG><a name="[173]"></a>smpl_send_mgmt_reply</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, nwk_mgmt.o(i.smpl_send_mgmt_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = smpl_send_mgmt_reply &rArr; nwk_CTS_process &rArr; SMPL_Ioctl &rArr; nwk_rawReceive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resend_request_process
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_RTS_process
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_Data_Ack_process
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_DS_process
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_CTS_process
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_search_server_reply
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_poll_reply
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processMgmt
</UL>

<P><STRONG><a name="[174]"></a>smpl_send_ping_reply</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nwk_ping.o(i.smpl_send_ping_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = smpl_send_ping_reply &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendFrame
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processPing
</UL>

<P><STRONG><a name="[81]"></a>BackOffTimeOut</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, wers.o(i.BackOffTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = BackOffTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmrMsTimeGet
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelay
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSRFReceiverTask
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSExTask
</UL>

<P><STRONG><a name="[83]"></a>BackOffTimeOutEx</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, wers.o(i.BackOffTimeOutEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = BackOffTimeOutEx
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmrMsTimeGet
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelay
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERS_Transmit
</UL>

<P><STRONG><a name="[84]"></a>CheckTimeOut</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, wers.o(i.CheckTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CheckTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmrMsTimeGet
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processMessage
</UL>

<P><STRONG><a name="[134]"></a>WERSExWorking</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, wers.o(i.WERSExWorking))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = WERSExWorking &rArr; SMPL_LinkListen &rArr; nwk_getLocalLinkID
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_LinkListen
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSExTask
</UL>

<P><STRONG><a name="[50]"></a>WERSRFBridgeTask</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, wers.o(i.WERSRFBridgeTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = WERSRFBridgeTask &rArr; WERS_Transmit &rArr; RF_SendRTS &rArr; SMPL_Ioctl &rArr; nwk_rawReceive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_LEDSet
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSMsTimeGet
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_mem_free
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERS_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wers.o(i.WERSExTask)
</UL>
<P><STRONG><a name="[12d]"></a>WERSReadDevice</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, wers.o(i.WERSReadDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = WERSReadDevice &rArr; Flash_Write &rArr; Flash_WritePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSExTask
</UL>

<P><STRONG><a name="[129]"></a>WERSWriteDevice</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wers.o(i.WERSWriteDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = WERSWriteDevice &rArr; Flash_Write &rArr; Flash_WritePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSAPCmd
</UL>

<P><STRONG><a name="[60]"></a>WERS_RTS_CTS_Notify</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, wers.o(i.WERS_RTS_CTS_Notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = WERS_RTS_CTS_Notify &rArr; rf_mem_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmrMsTimeGet
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_mem_malloc
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_mem_free
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wers.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>WERS_processReSendRequest</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, wers.o(i.WERS_processReSendRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = WERS_processReSendRequest &rArr; rf_mem_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_mem_malloc
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_mem_free
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wers.o(.constdata)
</UL>
<P><STRONG><a name="[138]"></a>processMessage</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, wers.o(i.processMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = processMessage &rArr; SMPL_Receive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSMsTimeGet
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Receive
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_mem_malloc
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_mem_free
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchTransactionGUID
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddNewTransactionToQue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeOut
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WERSRFReceiverTask
</UL>

<P><STRONG><a name="[53]"></a>sCB</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, wers.o(i.sCB))
<BR>[Address Reference Count : 1]<UL><LI> wers.o(i.WERSExTask)
</UL>
<P><STRONG><a name="[52]"></a>sReset</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wers.o(i.sReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = sReset
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wers.o(i.WERSExTask)
</UL>
<P><STRONG><a name="[56]"></a>watchDogTask</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, rf_wd.o(i.watchDogTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = watchDogTask &rArr; ResetReceive &rArr; mrfiSpiCmdStrobe
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rf_wd.o(i.WatchDogInit)
</UL>
<P><STRONG><a name="[177]"></a>rf_plug_holes</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, rf_mem.o(i.rf_plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rf_plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_mem_free
</UL>

<P><STRONG><a name="[bf]"></a>OS_InitEventList</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, os_core.o(i.OS_InitEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_InitEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[bc]"></a>OS_InitMisc</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_core.o(i.OS_InitMisc))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[bd]"></a>OS_InitRdyList</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, os_core.o(i.OS_InitRdyList))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[be]"></a>OS_InitTCBList</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, os_core.o(i.OS_InitTCBList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_InitTCBList
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c3]"></a>OS_InitTaskIdle</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, os_core.o(i.OS_InitTaskIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c4]"></a>OS_InitTaskStat</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, os_core.o(i.OS_InitTaskStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskStat &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c7]"></a>OS_SchedNew</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_core.o(i.OS_SchedNew))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[e2]"></a>OSTmr_InitTask</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, os_tmr.o(i.OSTmr_InitTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[e5]"></a>OSTmr_Link</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, os_tmr.o(i.OSTmr_Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTmr_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[e3]"></a>OSTmr_Lock</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_tmr.o(i.OSTmr_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = OSTmr_Lock &rArr; OSSemPend &rArr; OS_Sched &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[4c]"></a>OSTmr_Task</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, os_tmr.o(i.OSTmr_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = OSTmr_Task &rArr; OSTmr_Lock &rArr; OSSemPend &rArr; OS_Sched &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlock
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Link
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_tmr.o(i.OSTmr_InitTask)
</UL>
<P><STRONG><a name="[e4]"></a>OSTmr_Unlink</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, os_tmr.o(i.OSTmr_Unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OSTmr_Unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[e6]"></a>OSTmr_Unlock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, os_tmr.o(i.OSTmr_Unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OSTmr_Unlock &rArr; OSSemPost &rArr; OS_Sched &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[144]"></a>_printf_core</STRONG> (Thumb, 1010 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[146]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[145]"></a>_printf_pre_padding</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
